# Autogenerated from a Treetop grammar. Edits may be lost.


module Lodestone
  include Treetop::Runtime

  def root
    @root ||= :document
  end

  module Document0
    def content
      elements.map{ |e| e.content unless e.content.nil? }
    end
  end

  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_define
      if r2
        r1 = r2
      else
        r3 = _nt_path
        if r3
          r1 = r3
        else
          r4 = _nt_user
          if r4
            r1 = r4
          else
            r5 = _nt_group
            if r5
              r1 = r5
            else
              r6 = _nt_perms
              if r6
                r1 = r6
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Document0)

    node_cache[:document][start_index] = r0

    r0
  end

  module Define0
    def content
      nil
    end
  end

  def _nt_define
    start_index = index
    if node_cache[:define].has_key?(index)
      cached = node_cache[:define][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("define", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure("define")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Define0)
    else
      if has_terminal?(" and", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure(" and")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Define0)
      else
        if has_terminal?(" with", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure(" with")
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Define0)
        else
          if has_terminal?(" it", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure(" it")
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Define0)
          else
            if has_terminal?(" should be", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 10))
              @index += 10
            else
              terminal_parse_failure(" should be")
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Define0)
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:define][start_index] = r0

    r0
  end

  module Path0
  end

  module Path1
  end

  module Path2
    def content
      ["path", text_value.split[-1]]
    end
  end

  def _nt_path
    start_index = index
    if node_cache[:path].has_key?(index)
      cached = node_cache[:path][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?(" file ", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure(" file ")
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[A-Za-z\\/^]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Path0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Path2)
    else
      i5, s5 = index, []
      if has_terminal?(" directory ", false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 11))
        @index += 11
      else
        terminal_parse_failure(" directory ")
        r6 = nil
      end
      s5 << r6
      if r6
        s7, i7 = [], index
        loop do
          if has_terminal?('\G[A-Za-z\\/^]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(Path1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
        r0.extend(Path2)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:path][start_index] = r0

    r0
  end

  module User0
  end

  module User1
    def content
      ["user", text_value.split[-1]]
    end
  end

  def _nt_user
    start_index = index
    if node_cache[:user].has_key?(index)
      cached = node_cache[:user][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(" user ", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure(" user ")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z^]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(User0)
      r0.extend(User1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:user][start_index] = r0

    r0
  end

  module Group0
  end

  module Group1
    def content
      ["group", text_value.split[-1]]
    end
  end

  def _nt_group
    start_index = index
    if node_cache[:group].has_key?(index)
      cached = node_cache[:group][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(" group ", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure(" group ")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z^]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Group0)
      r0.extend(Group1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:group][start_index] = r0

    r0
  end

  module Perms0
  end

  module Perms1
    def content
      ["perms", text_value.split[-1]]
    end
  end

  def _nt_perms
    start_index = index
    if node_cache[:perms].has_key?(index)
      cached = node_cache[:perms][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(" perms ", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure(" perms ")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9^]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Perms0)
      r0.extend(Perms1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:perms][start_index] = r0

    r0
  end

end

class LodestoneParser < Treetop::Runtime::CompiledParser
  include Lodestone
end
